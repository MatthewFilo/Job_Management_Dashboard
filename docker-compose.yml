services:
  db:
    container_name: rescale2-db
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: rescalesvc
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 10

  redis:
    container_name: rescale2-redis
    image: redis:7-alpine
    ports:
      - "6379:6379"

  backend:
    container_name: rescale2-backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      POSTGRES_DB: rescalesvc
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      CORS_ALLOW_ALL: "true"
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started

  frontend:
    container_name: rescale2-frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      HOST: 0.0.0.0
      PORT: 3000
      REACT_APP_API_URL: http://backend:8000/api
    ports:
      - "3000:3000"
    depends_on:
      - backend

  e2e:
    image: mcr.microsoft.com/playwright:v1.47.2-jammy
    shm_size: 1g
    working_dir: /work/frontend
    volumes:
      - ./frontend:/work/frontend
    environment:
      E2E_BASE_URL: http://frontend:3000
      E2E_API_URL: http://backend:8000/api
    depends_on:
      backend:
        condition: service_started
      frontend:
        condition: service_started

volumes:
  postgres-data:
